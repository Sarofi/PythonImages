FHV Python README, created by Yunhan Wang 2014-09-08

UPDATE CHANGELOG WHEN YOU'VE MADE CHANGES!


Based on FHV Matlab v00.71 version
Tested on Mac OSX 10.9.4, Python 2.7.8, GCC 4.2.1



========== Software Structures ========== 

# Python software includes the following files:

README 	installation guides
ChangeLog	Change log file for developers. To make life easy please update it WHENEVER you merged your codes into this software

hetero.py 	same as hetero.m. Parse commands into software and call each corresponding functions to work. Print processing information.
funcs.py 	collections of all subroutines as the many functions in Matlab
helper.py	some helper functions to do print/diary. e.g. wrapped print is easier to turn off/ add additional features than native one
structures.py	all data structures. Matlab has powerful and flexible cell array while Python has nothing. We have to design different structures that serve as cell array.

inst_Neta2_rule49_Nv500_fw.py	These are four instructions, or so called test cases that pass data into our software and verify (hopefully) all the commands
inst_Neta2_rule49_Nv500_homo_inv.py
inst_Neta2_rule49_Nv500_pre4hetero_inv.py
inst_Neta2_rule49_Nv500_hetero_inv.py

the rest are data files read by Python instructions


# Workflow:
"instructions" - calls "hetero", pass data files and commands to it - 
"hetero" - obtains from "instructions" each command and parameters, wraps commands and calls corresponding subroutines in "funcs" to run -
"funcs" - each function in "funcs" will get parameters/data and work. Data are saved in data structures defined in "structures"



========== Installation guides ========== 


PREREQUISITES for developers

# Versions listed in () are what I used for developing. I used Mac OSX so in the other systems it might be slightly different
Python 2.7 	(2.7.8) 		DO NOT use v3.0+ ! 3.0 have incompatible issues with codes written under 2.7
A Python IDE 	(PyCharm) 	Recommanded: PyCharm (free version is enough), Spyder (free, Matlab style), LiClipse (free, based on Eclipse)
EMAN2 	(2.07, binary) 	Binary packages preferred. If you choose to compile from sources, here are my notes (you could also find installation guide on its website): XCode, Qt 4.8.6, boost 1.51, gsl 1.16, fftw 3.3.4, Berkeley DB 5.3.28.NC(do not install newer version as it requires AGPL3 or a commercial license.), freetype-2.4.10 (do not use the newest 2.5.3!!), ftgl 2.1.3-rc5, cmake 3.0.1, sip 4.16.2, PyQt 4.11.1, bsddb3 6.1.0, PyOpenGL-3.1.0, ipython-0.10.2, matplotlib-1.3.1, libpng-1.6.12, hdf5-1.8.13
numpy, scipy 	(1.7.0, 0.13.0b1) You could install these using binary packages or from repositories, be sure to remember where they are installed

# Required for Mac OSX
Xcode 5+	(6.b5)		Command line tool does not go with new versions of Xcode anymore, however it is still required for our Ipopt. Just search the web, download and install by yourself.
Command line tool

# Required for fmincon
casadi, IpOpt 	(1.9.0, 3.11.9) 	Instructions are highlighted in ../Resources/Casadi Installation in Linux.pdf
				Or go to https://github.com/casadi/casadi/wiki/InstallationInstructions

/********** SKIP this part, deprecated ***********/
# Required for Ipopt (including optimization solvers, hopefully a fmincon alternative)
1. gcc, gfortran the same Version 	(4.9.0)
2. wget
3. IpOpt (3.11.8) Installation. I put official documentation under fmincon_alternative/Introduction to Ipopt.pdf, or you could follow the specified guides I wrote:

Download IpOpt source code from http://eris.liralab.it/wiki/Installing_IPOPT, and put it wherever you like (suggested to be "/usr/local/ipopt");
Let's call this location as IPOPT_DWN_DIR="/usr/local/ipopt”. Then run the commands:
>> cd $IPOPT_DWN_DIR
>> cd ./ThirdParty/Blas && ./get.Blas	# download required solver packages
>> cd ../Lapack && ./get.Lapack # do not get HSL, which is not compatible with PyIpopt
>> cd ../Mumps && ./get.Mumps
>> cd ../Metis && ./get.Metis
>> cd ../ASL && ./get.ASL
>> export PATH=${IPOPT_DWN_DIR}/build:${PATH}	# better to write it into ~/.bash_profile
>> mkdir ../build && cd ../build # build 
>> ../configure --with-blas=BUILD --with-mumps=BUILD --enable-static 
>> make -j5 # -jN is the flag to speed up the compilation, set N to be # of available processors + 1. If it fails, try "make" or "make -lcoinhsl"
>> make test
>> make install

4. PyIpopt (0.8.2) installation. Website at https://github.com/xuy/pyipopt.
>> git clone http://github.com/xuy/pyipopt.git
modify pyipopt/setup.py, change line 15 IPOPT_DIR = '' to your own ipopt installed dir (mine is $IPOPT_DWN_DIR/build/)
>> python setup.py build && sudo python setup.py install && python examples/hs071.py
you should get the solved result

5. Clean up Ipopt & PyIpopt
>> cd $IPOPT_DWN_DIR/build/
>> make clean && sudo make uninstall && make distclean && rm -rf *
>> sudo rm -rf $PYTHON_DIR/site-packages/pyipopt && sudo rm -f $PYTHON_DIR/site-packages/pyipopt-0.8-py2.7.egg-info
>> cd $PYIPOPT_DWN_DIR && python setup.py clean
Then delete the two dowload files
/********** SKIP above part, deprecated ***********/


CONFIGURATION


If you run Python in command line, make sure the Numpy, Scipy, Sympy, EMAN2, and PyIpopt directories are added into $PYTHONPATH
If you use IDE: 
	go to "Preferences"/"Settings", goto "Project Interpreter"/"Python Interpreter", 
	edit the Interpreter Paths that you are currently using, add paths of those packages if they are not included.
	e.g. for EMAN2, add "/Applications/EMAN2/bin", "/Applications/EMAN2/extlib/bin","/Applications/EMAN2/extlib/lib","/Applications/EMAN2/extlib/qt4","/Applications/EMAN2/extlib/site-packages","/Applications/EMAN2/lib".




========== Running and Debugging for developers ========== 


RUNNING

run four test cases in order:
>> inst_Neta2_rule49_Nv500_fw.py # results printed in ../reports/python_1_fw.pdf
>> inst_Neta2_rule49_Nv500_homo_inv.py # results printed in ../reports/python_2_homo_inv.pdf
>> inst_Neta2_rule49_Nv500_pre4hetero_inv.py # results printed in ../reports/python_3_pre4hetero.pdf
>> inst_Neta2_rule49_Nv500_hetero_inv.py # results printed in ../reports/python_4_hetero_inv.pdf



DEBUGGING ***** !important *****

A careful way of developing is to work and test on a section of codes before merging into our software, and run the instructions to test.
Please NOTICE that passing the instructions does NOT mean all correctness. The instructions only include a simple and small set of data excluding many corner cases, while eventually we will face huge size of data and extremely complicated calculations.
If you do unit tests while writing a piece of codes, which is quite simple and clear to control, then debugging in future will be much easier.




========== Testing Results ==========


Testing results are printed in ../results/python_X_XX.pdf
